{\rtf1\ansi\uc0\deff0{\fonttbl{\f0\fmodern\fprq1\fcharset0;}}{\colortbl;\red136\green136\blue136;\red186\green33\blue33;\red0\green68\blue221;\red102\green102\blue102;\red64\green128\blue128;\red160\green160\blue0;\red25\green23\blue124;\red0\green128\blue0;\red187\green102\blue136;\red187\green102\blue34;\red136\green0\blue0;\red170\green34\blue255;\red153\green153\blue153;\red0\green160\blue0;\red160\green0\blue0;\red255\green0\blue0;\red128\green0\blue128;\red176\green0\blue64;\red0\green0\blue255;\red187\green187\blue187;\red188\green122\blue0;\red0\green0\blue128;\red125\green144\blue41;\red210\green65\blue58;}\f0 {\cf8\b package} {\cf19\b com.minkov.demos.asyncreactivexdemo.repos}{\cf4 ;}\par
\par
{\cf8\b import} {\cf19\b com.minkov.demos.asyncreactivexdemo.factories.base.TasksFactory}{\cf4 ;}\par
{\cf8\b import} {\cf19\b com.minkov.demos.asyncreactivexdemo.models.Book}{\cf4 ;}\par
{\cf8\b import} {\cf19\b com.minkov.demos.asyncreactivexdemo.repos.base.BaseRepository}{\cf4 ;}\par
{\cf8\b import} {\cf19\b com.minkov.demos.asyncreactivexdemo.services.BooksService}{\cf4 ;}\par
\par
{\cf8\b import} {\cf19\b org.junit.Assert}{\cf4 ;}\par
{\cf8\b import} {\cf19\b org.junit.Before}{\cf4 ;}\par
{\cf8\b import} {\cf19\b org.junit.Test}{\cf4 ;}\par
{\cf8\b import} {\cf19\b org.mockito.Mock}{\cf4 ;}\par
{\cf8\b import} {\cf19\b org.mockito.MockitoAnnotations}{\cf4 ;}\par
\par
{\cf8\b import} {\cf19\b java.io.IOException}{\cf4 ;}\par
{\cf8\b import} {\cf19\b java.util.Arrays}{\cf4 ;}\par
{\cf8\b import} {\cf19\b java.util.List}{\cf4 ;}\par
\par
{\cf8\b import} {\cf19\b io.reactivex.Scheduler}{\cf4 ;}\par
{\cf8\b import} {\cf19\b io.reactivex.functions.Consumer}{\cf4 ;}\par
{\cf8\b import} {\cf19\b io.reactivex.schedulers.Schedulers}{\cf4 ;}\par
{\cf8\b import} {\cf19\b retrofit2.Call}{\cf4 ;}\par
{\cf8\b import} {\cf19\b retrofit2.Response}{\cf4 ;}\par
\par
{\cf8\b import static} {\cf19\b org.mockito.Mockito.when}{\cf4 ;}\par
\par
{\cf8\b public} {\cf8\b class} {\cf19\b BooksActivityRxTests} {\cf4 \{}\par
    {\cf12 @Mock}\par
    BooksService mockBooksService{\cf4 ;}\par
\par
    {\cf12 @Mock}\par
    Call{\cf4 <}List{\cf4 <}Book{\cf4 >}{\cf4 >} mockCall{\cf4 ;}\par
\par
    {\cf8\b private} List{\cf4 <}Book{\cf4 >} mBooks {\cf4 =} Arrays{\cf4 .}{\cf23 asList}{\cf4 (}{\cf8\b new} Book{\cf4 (}{\cf2 "1"}{\cf4 ,} {\cf2 "Test title #1"}{\cf4 ,} {\cf2 "Description #1"}{\cf4 )}{\cf4 ,}\par
            {\cf8\b new} Book{\cf4 (}{\cf2 "1"}{\cf4 ,} {\cf2 "Test title #2"}{\cf4 ,} {\cf2 "Description #2"}{\cf4 )}{\cf4 ,}\par
            {\cf8\b new} Book{\cf4 (}{\cf2 "1"}{\cf4 ,} {\cf2 "Test title #3"}{\cf4 ,} {\cf2 "Description #3"}{\cf4 )}{\cf4 ,}\par
            {\cf8\b new} Book{\cf4 (}{\cf2 "1"}{\cf4 ,} {\cf2 "Test title #4"}{\cf4 ,} {\cf2 "Description #4"}{\cf4 )}{\cf4 ,}\par
            {\cf8\b new} Book{\cf4 (}{\cf2 "1"}{\cf4 ,} {\cf2 "Test title #5"}{\cf4 ,} {\cf2 "Description #5"}{\cf4 )}{\cf4 )}{\cf4 ;}\par
\par
\par
    {\cf8\b private} BooksRepository repository{\cf4 ;}\par
\par
    {\cf12 @Before}\par
    {\cf8\b public} {\cf18 void} {\cf19 setup}{\cf4 (}{\cf4 )} {\cf8\b throws} IOException {\cf4 \{}\par
        MockitoAnnotations{\cf4 .}{\cf23 initMocks}{\cf4 (}{\cf8\b this}{\cf4 )}{\cf4 ;}\par
        when{\cf4 (}mockCall{\cf4 .}{\cf23 execute}{\cf4 (}{\cf4 )}{\cf4 )}\par
                {\cf4 .}{\cf23 thenReturn}{\cf4 (}Response{\cf4 .}{\cf23 success}{\cf4 (}mBooks{\cf4 )}{\cf4 )}{\cf4 ;}\par
\par
        when{\cf4 (}mockBooksService{\cf4 .}{\cf23 listBooks}{\cf4 (}{\cf4 )}{\cf4 )}\par
                {\cf4 .}{\cf23 thenReturn}{\cf4 (}mockCall{\cf4 )}{\cf4 ;}\par
\par
        repository {\cf4 =} {\cf8\b new} BooksRepository{\cf4 (}mockBooksService{\cf4 )}{\cf4 ;}\par
    {\cf4 \}}\par
\par
    {\cf12 @Test}\par
    {\cf8\b public} {\cf18 void} {\cf19 when_books_available_show_return_books}{\cf4 (}{\cf4 )} {\cf8\b throws} InterruptedException {\cf4 \{}\par
        repository{\cf4 .}{\cf23 getWithObservable}{\cf4 (}{\cf4 )}\par
                {\cf4 .}{\cf23 subscribeOn}{\cf4 (}Schedulers{\cf4 .}{\cf23 trampoline}{\cf4 (}{\cf4 )}{\cf4 )}\par
                {\cf4 .}{\cf23 observeOn}{\cf4 (}Schedulers{\cf4 .}{\cf23 trampoline}{\cf4 (}{\cf4 )}{\cf4 )}\par
                {\cf4 .}{\cf23 subscribe}{\cf4 (}{\cf8\b new} Consumer{\cf4 <}List{\cf4 <}Book{\cf4 >}{\cf4 >}{\cf4 (}{\cf4 )} {\cf4 \{}\par
                    {\cf12 @Override}\par
                    {\cf8\b public} {\cf18 void} {\cf19 accept}{\cf4 (}List{\cf4 <}Book{\cf4 >} books{\cf4 )} {\cf8\b throws} Exception {\cf4 \{}\par
                        Assert{\cf4 .}{\cf23 assertEquals}{\cf4 (}mBooks{\cf4 .}{\cf23 size}{\cf4 (}{\cf4 )}{\cf4 ,} books{\cf4 .}{\cf23 size}{\cf4 (}{\cf4 )} {\cf4 +} {\cf4 1}{\cf4 )}{\cf4 ;}\par
                        {\cf8\b for} {\cf4 (}{\cf18 int} i {\cf4 =} {\cf4 0}{\cf4 ;} i {\cf4 <} mBooks{\cf4 .}{\cf23 size}{\cf4 (}{\cf4 )}{\cf4 ;} i{\cf4 +}{\cf4 +}{\cf4 )} {\cf4 \{}\par
                            Assert{\cf4 .}{\cf23 assertEquals}{\cf4 (}mBooks{\cf4 .}{\cf23 get}{\cf4 (}i{\cf4 )}{\cf4 ,} books{\cf4 .}{\cf23 get}{\cf4 (}i{\cf4 )}{\cf4 )}{\cf4 ;}\par
                        {\cf4 \}}\par
                    {\cf4 \}}\par
                {\cf4 \}}{\cf4 )}{\cf4 ;}\par
    {\cf4 \}}\par
\par
{\cf4 \}}\par
}